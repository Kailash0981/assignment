// Online C++ compiler to run C++ program online
#include <iostream>
#include<stack>
#include <cmath>

using namespace std;
void movedisk(char from,char to,stack<int>&src,stack<int>&des){
    if(src.empty() && des.empty())
    return;
       if(src.empty()){
           int disk=des.top();
           des.pop();
           src.push(disk);
           cout<<"move disk "<<disk<<"from"<<to<<"to"<<from<<endl;
       }else if(des.empty()){
           int disk=src.top();
           src.pop();
           des.push(disk);
           cout<<"move disk "<<disk<<"from"<<from<<"to"<<to<<endl;
       }
       else if(src.top()>des.top()){
           int disk=des.top();
           des.pop();
           src.push(disk);
           cout<<"move disk "<<disk<<"from"<<from<<"to"<<to<<endl;
       }else{
           int disk=src.top();
           src.pop();
           des.push(disk);
           cout<<"move disk "<<disk<<"from"<<from<<"to"<<to<<endl;
       }
       
       
       
       
       
       
}
int main() {
int n;
cout<<"enter no of disk";
cin>> n;
stack<int>src,aux,des;
int totalmoves=pow(2,n)-1;
for(int i=n;i>=1;i--){
    src.push(i);
}
char s='A',a='b',d='c';
if(n%2==0){
    swap(a,d);
}
for(int i=1;i<=totalmoves;i++){
    if(i%3==1){
        movedisk(s,d,src,des);
    }else if(i%3==2){
        movedisk(s,a,src,aux);
    }else {
        movedisk(a,d,aux,des);
    }
}
    return 0;
}






#include <iostream>

// Function to solve the Tower of Hanoi puzzle recursively
void towerOfHanoi(int n, char source, char destination, char auxiliary) {
    // Base case: If there's only one disk, move it directly from source to destination
    if (n == 1) {
        std::cout << "Move disk 1 from " << source << " to " << destination << std::endl;
        return;
    }

    // Step 1: Move n-1 disks from source to auxiliary, using destination as temporary
    towerOfHanoi(n - 1, source, auxiliary, destination);

    // Step 2: Move the nth (largest) disk from source to destination
    std::cout << "Move disk " << n << " from " << source << " to " << destination << std::endl;

    // Step 3: Move the n-1 disks from auxiliary to destination, using source as temporary
    towerOfHanoi(n - 1, auxiliary, destination, source);
}

int main() {
    int num_disks;
    std::cout << "Enter the number of disks: ";
    std::cin >> num_disks;

    // Call the recursive function with initial parameters
    // 'A' as source, 'C' as destination, 'B' as auxiliary
    towerOfHanoi(num_disks, 'A', 'C', 'B');

    return 0;
}






#include <iostream>
using namespace std;
#define MAX 5  // Maximum size of stack

class Stack {
    int arr[MAX];
    int top;

public:
    Stack() { top = -1; }

    // Push operation
    void push(int x) {
        if (top == MAX - 1) {
            cout << "Stack Overflow\n";
            return;
        }
        arr[++top] = x;
        cout << x << " pushed\n";
    }

    // Pop operation
    void pop() {
        if (top == -1) {
            cout << "Stack Underflow\n";
            return;
        }
        cout << arr[top--] << " popped\n";
    }

    // Peek operation
    int peek() {
        if (top == -1) {
            cout << "Stack is Empty\n";
            return -1;
        }
        return arr[top];
    }

    // Check empty
    bool isEmpty() {
        return (top == -1);
    }
};

int main() {
    Stack s;
    s.push(10);
    s.push(20);
    s.push(30);

    cout << "Top element: " << s.peek() << endl;

    s.pop();
    s.pop();

    cout << "Is stack empty? " << (s.isEmpty() ? "Yes" : "No") << endl;

    return 0;
}